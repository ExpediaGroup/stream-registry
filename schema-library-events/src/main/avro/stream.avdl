@namespace("com.expediagroup.streamplatform.streamregistry")

protocol StreamRegistryProtocol {

  import idl "consumers.avdl";
  import idl "producers.avdl";
  import idl "regionReplicator.avdl";
  import idl "s3Connector.avdl";

  record Schema {

    /**
    * schema id in schema registry. (Not required on input)
    */
    string id;

    /**
    * subject id in schema registry. (Not required on input)
    */
    int subjectId;

    /**
    * Schema string json
    */
    string schemaString;

    /**
    * Time in millis from epoc
    * Auto generated
    */
    union {null, string} created = null;

    /**
    * Time in millis from epoc
    * Auto generated
    */
    union {null, string} updated = null;

  }

  enum SchemaCompatibility {

    BACKWARD, TRANSITIVE_BACKWARD, FORWARD, TRANSITIVE_FORWARD, FULL, TRANSITIVE_FULL, NONE

  }

  enum OperationType {

    GET, UPSERT, DELETE

  }

  record Tags {
    /**
     * ProductId
     */
    int productId;

    /**
     * PortfolioId
     */
    union{null, int} portfolioId = null;

    /**
     * brand: brand name.
     * Example: ExpediaGroup
     */
    union{null, string} brand = null;

    /**
     * assetProtectionLevel
     */
    union{null, string} assetProtectionLevel = null;

    /**
     * Dominion ComponentId.
     * Example - "componentId": "fedc1234-000a-4888-b555-1111aaaa87cc"
     */
    union{null, string} componentId = null;

    /**
     * Hint for Stream Registry to choose a cluster.
     * Example: primary, other, highvolume.
     */
    string hint = "primary";
  }

  /**
  * Stream is a multi-region, multi-cluster abstraction for a topic.
  */
  record AvroStream {
    /**
    * Stream Name is the key for the Keyvalue store topic.
    * It will be converted to all lower case letters.
    * eg: test-stream-1
    */
    string name;

    /**
    * Schema Compatibility - Default is transitive_full.
    */
    SchemaCompatibility schemaCompatibility = "TRANSITIVE_FULL";

    /**
    * Latest Key Schema
    */
    Schema latestKeySchema;

    /**
    * Latest Value Schema
    */
    Schema latestValueSchema;

    /**
    * Email of owner that owns the stream
    */
    string owner;

    /**
    * Created Time in millis from epoch
    */
    long created = -1;

    /**
    * Updated Time in millis from epoch
    */
    long updated = -1;


    /**
    * GitHub URL of the generated stream-lib artifact
    */
    union {null, string} githubUrl = null;

    /**
     * Tags for the app.
     */
    Tags tags;

    /**
    * Producers
    */
    union {null, array<Producer>} producers = null;

    /**
    * Consumers
    */
    union {null, array<Consumer>} consumers = null;

    /**
    * Is Data Needed At Rest? Example: Kafka Connect S3
    */
    boolean isDataNeededAtRest = false;

    /**
    * Is Automation Needed? Example: Does Mirror Maker need to be deployed
    */
    boolean isAutomationNeeded = true;

    /**
    * Region Replicator List with status
    */
    union {null, array<RegionReplicator>} regionReplicatorList = null;

    /**
     * S3Connector list with status
     */
    union {null, array<S3Connector>} s3ConnectorList = null;

    /**
    * Operation Type
    */
    OperationType operationType;

    /**
    * List of Regions the stream live in
    */
    array<string> vpcList = null;

    /**
    * List of Regions to which the stream will be replicated automatically
    */
    union {null, array<string>} replicatedVpcList = null;

    /**
    * Topic Configuration
    */
    union {null, map<string>} topicConfig = null;

    /**
    * Number of Partitions
    */
    int partitions = 1;

    /**
    * Replication Factor
    */
    int replicationFactor = 3;
  }

  record AvroStreamKey {

  /**
  * Stream Name is the key for the Keyvalue store topic.
  * It will be converted to all lower case letters.
  * eg: test-stream-1
  */
  string streamName;

  }

}
