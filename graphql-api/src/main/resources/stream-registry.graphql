scalar ObjectNode

############ Tag ############

input TagInput {
  name: String!
  value: String
}

input TagQuery {
  nameRegex: String
  valueRegex: String
}

type Tag {
  name: String!
  value: String
}

############ Specification ############

input SpecificationInput {
  description: String!
  tags: [TagInput!]
  type: String!
  configuration: ObjectNode!
}

input SpecificationQuery {
  descriptionRegex: String
  tags: [TagQuery!]
  typeRegex: String
}

type Specification {
  description: String
  tags: [Tag!]!
  type: String!
  configuration: ObjectNode!
}

############ Domain ############

type DomainKey {
  name: String!
}

input DomainKeyInput {
  name: String!
}

input DomainKeyQuery {
  nameRegex: String
}

type Domain {
  key: DomainKey!
  specification: Specification!
  status: ObjectNode
}

############ Schema ############

type SchemaKey {
  domain: DomainKey!
  name: String!
}

input SchemaKeyInput {
  domain: DomainKeyInput!
  name: String!
}

input SchemaKeyQuery {
  domain: DomainKeyQuery
  nameRegex: String
}

type Schema {
  key: SchemaKey!
  specification: Specification!
  configuration: ObjectNode!
  status: ObjectNode
  domain: Domain!
}

############ Stream ############

type StreamKey {
  domain: DomainKey!
  name: String!
  version: Int!
}

input StreamKeyInput {
  domain: DomainKeyInput!
  name: String!
  version: Int!
}

input StreamKeyQuery {
  domain: DomainKeyQuery!
  nameRegex: String
  version: Int
}

type Stream {
  key: StreamKey!
  schema: Schema!
  specification: Specification!
  status: ObjectNode
}

############ Zone ############

type ZoneKey {
  name: String!
}

input ZoneKeyInput {
  name: String!
}

input ZoneKeyQuery {
  nameRegex: String
}

type Zone {
  key: ZoneKey!
  specification: Specification!
  status: ObjectNode
}

############ Infrastructure ############

type InfrastructureKey {
  zone: ZoneKey!
  name: String!
}

input InfrastructureKeyInput {
  zone: ZoneKeyInput!
  name: String!
}

input InfrastructureKeyQuery {
  zone: ZoneKeyQuery
  nameRegex: String
}

type Infrastructure {
  key: InfrastructureKey!
  specification: Specification!
  status: ObjectNode
}

############ Producer ############

type ProducerKey {
  stream: StreamKey!
  zone: ZoneKey!
  name: String!
}

input ProducerKeyInput {
  stream: StreamKeyInput!
  zone: ZoneKeyInput!
  name: String!
}

input ProducerKeyQuery {
  stream: StreamKeyQuery
  zone: ZoneKeyQuery
  nameRegex: String
}

type Producer {
  key: ProducerKey!
  specification: Specification!
  status: ObjectNode
}

############ Consumer ############

type ConsumerKey {
  stream: StreamKey!
  zone: ZoneKey!
  name: String!
}

input ConsumerKeyInput {
  stream: StreamKeyInput!
  zone: ZoneKeyInput!
  name: String!
}

input ConsumerKeyQuery {
  stream: StreamKeyQuery
  zone: ZoneKeyQuery
  nameRegex: String
}

type Consumer {
  key: ConsumerKey!
  specification: Specification!
  status: ObjectNode
}

############ StreamBinding ############

type StreamBindingKey {
  stream: StreamKey!
  infrastructure: InfrastructureKey!
}

input StreamBindingKeyInput {
  stream: StreamKeyInput
  infrastructure: InfrastructureKeyInput
}

input StreamBindingKeyQuery {
  stream: StreamKeyQuery
  infrastructure: InfrastructureKeyQuery
}

type StreamBinding {
  key: StreamBindingKey!
  specification: Specification!
  status: ObjectNode
}

############ Mutations ############

type Mutation {

  insertDomain(key: DomainKeyInput!, specification: SpecificationInput!): Domain!
  updateDomain(key: DomainKeyInput!, specification: SpecificationInput!): Domain!
  upsertDomain(key: DomainKeyInput!, specification: SpecificationInput!): Domain!
  deleteDomain(key: DomainKeyInput!): Boolean!
  updateDomainStatus(key: DomainKeyInput!, status: ObjectNode!): Domain!

  insertSchema(key: SchemaKeyInput!, specification: SpecificationInput!): Schema!
  updateSchema(key: SchemaKeyInput!, specification: SpecificationInput!): Schema!
  upsertSchema(key: SchemaKeyInput!, specification: SpecificationInput!): Schema!
  deleteSchema(key: SchemaKeyInput!): Boolean!
  updateSchemaStatus(key: SchemaKeyInput!, status: ObjectNode!): Schema!

  insertStream(key: StreamKeyInput!, specification: SpecificationInput!, schema: SchemaKeyInput!): Stream!
  updateStream(key: StreamKeyInput!, specification: SpecificationInput!): Stream!
  upsertStream(key: StreamKeyInput!, specification: SpecificationInput!, schema: SchemaKeyInput): Stream!
  deleteStream(key: StreamKeyInput!): Boolean!
  updateStreamStatus(key: StreamKeyInput!, status: ObjectNode!): Stream!

  insertZone(key: ZoneKeyInput!, specification: SpecificationInput!): Zone!
  updateZone(key: ZoneKeyInput!, specification: SpecificationInput!): Zone!
  upsertZone(key: ZoneKeyInput!, specification: SpecificationInput!): Zone!
  deleteZone(key: ZoneKeyInput!): Boolean!
  updateZoneStatus(key: ZoneKeyInput!, status: ObjectNode!): Zone!

  insertInfrastructure(key: InfrastructureKeyInput!, specification: SpecificationInput!): Infrastructure!
  updateInfrastructure(key: InfrastructureKeyInput!, specification: SpecificationInput!): Infrastructure!
  upsertInfrastructure(key: InfrastructureKeyInput!, specification: SpecificationInput!): Infrastructure!
  deleteInfrastructure(key: InfrastructureKeyInput!): Boolean!
  updateInfrastructureStatus(key: InfrastructureKeyInput!, status: ObjectNode!): Infrastructure!

  insertProducer(key: ProducerKeyInput!, specification: SpecificationInput!): Producer!
  updateProducer(key: ProducerKeyInput!, specification: SpecificationInput!): Producer!
  upsertProducer(key: ProducerKeyInput!, specification: SpecificationInput!): Producer!
  deleteProducer(key: ProducerKeyInput!): Boolean!
  updateProducerStatus(key: ProducerKeyInput!, status: ObjectNode!): Producer!

  insertConsumer(key: ConsumerKeyInput!, specification: SpecificationInput!): Consumer!
  updateConsumer(key: ConsumerKeyInput!, specification: SpecificationInput!): Consumer!
  upsertConsumer(key: ConsumerKeyInput!, specification: SpecificationInput!): Consumer!
  deleteConsumer(key: ConsumerKeyInput!): Boolean!
  updateConsumerStatus(key: ConsumerKeyInput!, status: ObjectNode!): Consumer!

  insertStreamBinding(key: StreamBindingKeyInput!, specification: SpecificationInput!): StreamBinding!
  updateStreamBinding(key: StreamBindingKeyInput!, specification: SpecificationInput!): StreamBinding!
  upsertStreamBinding(key: StreamBindingKeyInput!, specification: SpecificationInput!): StreamBinding!
  deleteStreamBinding(key: StreamBindingKeyInput!): Boolean!
  updateStreamBindingStatus(key: StreamBindingKeyInput!, status: ObjectNode!): StreamBinding!

}

############ Queries ############

type Query {

  getDomain(key: DomainKeyInput!): Domain!
  getDomains(key: DomainKeyQuery, specification: SpecificationQuery): [Domain!]!

  getSchema(key: SchemaKeyInput!): Schema!
  getSchemas(key: SchemaKeyQuery, specification: SpecificationQuery!): Schema!

  getStream(key: StreamKeyInput!): Stream!
  getStreams(key: StreamKeyQuery, specification: SpecificationQuery!): [Stream!]!

  getZone(key: ZoneKeyInput!): Zone!
  getZones(key: ZoneKeyQuery!, specification: SpecificationQuery): [Zone!]!

  getInfrastructure(key: InfrastructureKeyInput!): Infrastructure!
  getInfrastructures(key: InfrastructureKeyQuery!, specification: SpecificationQuery): [Infrastructure!]!

  getProducer(key: ProducerKeyInput!): Producer!
  getProducers(key: ProducerKeyQuery!, specification: SpecificationQuery): [Producer!]!

  getConsumer(key: ConsumerKeyInput!): Consumer!
  getConsumers(key: ConsumerKeyQuery!, specification: SpecificationQuery): [Consumer!]!

  getStreamBinding(key: StreamBindingKeyInput!): StreamBinding!
  getStreamBindings(key: StreamBindingKeyQuery!, specification: SpecificationQuery): [StreamBinding!]!
}
