server:
  type: simple
  applicationContextPath: /
  adminContextPath: /private
  connector:
    type: http
    port: 8080

# Env where StreamRegistry application is running
env: ${STREAM_REGISTRY_ENVIRONMENT:-local}

# list (yaml syntax) of Jersey Filter Full Class Names loaded at runtime.
requestFilterClassNames:
#  - com.expediagroup.streamplatform.extensions.filters.YourRequestFilter1
#  - com.expediagroup.streamplatform.extensions.filters.YourRequestFilter2
responseFilterClassNames:
#  - com.expediagroup.streamplatform.extensions.filters.YourResponseFilter1
#  - com.expediagroup.streamplatform.extensions.filters.YourResponseFilter2

# Properties of the Stream that got upserted in each HealthCheck
healthCheckStreamConfig:
  name: ${STREAM_REGISTRY_HEALTHCHECK_STREAM_NAME:-StreamRegistryHealthCheck}
  clusterRegion: ${STREAM_REGISTRY_HEALTHCHECK_STREAM_REGION:-localRegion}
  partitions: ${STREAM_REGISTRY_HEALTHCHECK_STREAM_PARTITIONS:-1}
  replicationFactor: ${STREAM_REGISTRY_HEALTHCHECK_STREAM_REPLICATION_FACTOR:-1}

# Validator Class that validates the stream from @PUT Stream
streamValidatorConfig:
  className: ${STREAM_REGISTRY_VALIDATOR:-com.expediagroup.streamplatform.streamregistry.extensions.validation.DefaultStreamValidator}

# SchemaManager class which would validate and register with the Underlying SchemaRegistry
schemaManagerConfig:
  className: ${STREAM_REGISTRY_SCHEMA_MANAGER:-com.expediagroup.streamplatform.streamregistry.extensions.schema.ConfluentSchemaManager}
  properties:
    schema.registry.url: ${STREAM_REGISTRY_SCHEMA_REGISTRY_URL:-http://localhost:8081}

# properties of the Producer that would produce events to the StreamRegistry's Underlying Compacted Topic where each Stream is stored.
kafkaProducerConfig:
  kafkaProducerProperties:
    bootstrap.servers: ${STREAM_REGISTRY_BOOTSTRAP_SERVERS:-localhost:9092}
    acks: all
    retries: ${STREAM_REGISTRY_PRODUCER_RETRIES:-4}
    batch.size: 1
    linger.ms: 1
    buffer.memory: 33554432
    schema.registry.url: ${STREAM_REGISTRY_SCHEMA_REGISTRY_URL:-http://localhost:8081}

# properties of the KStream that would build a GlobalKtable that would server @GET Streams
kafkaStreamsConfig:
  kstreamsProperties:
    bootstrap.servers: ${STREAM_REGISTRY_BOOTSTRAP_SERVERS:-localhost:9092}
    application.id: stream-registry-streams
    key.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
    value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
    schema.registry.url: ${STREAM_REGISTRY_SCHEMA_REGISTRY_URL:-http://localhost:8081}
    replication.factor: ${STREAM_REGISTRY_KSTREAMS_REPLICATION_FACTOR:-1}
    num.stream.threads: 2

# eventStoreTopic name is the name of the underlying Kafka Topic that would store the Streams created by the application.
# IMPORTANT: make sure the eventStoreTopic is compacted or retention.ms=-1 so that the created Streams are not lost.
# IMPORTANT: Recommended overrides in Prod:
#   STREAM_REGISTRY_EVENTSTORE_REPLICATION_FACTOR=3
#   STREAM_REGISTRY_EVENTSTORE_MININSYNCREPLICA=2
topicsConfig:
  eventStoreTopic:
    name: _streamregistry_streams${STREAM_REGISTRY_EVENTSTORE_TOPIC_SUFFIX:-_v0.1}
    partitions: ${STREAM_REGISTRY_EVENTSTORE_PARTITIONS:-1}
    replicationFactor: ${STREAM_REGISTRY_EVENTSTORE_REPLICATION_FACTOR:-1}
    properties:
      min.insync.replicas: ${STREAM_REGISTRY_EVENTSTORE_MIN_ISR:-1}
      cleanup.policy: ${STREAM_REGISTRY_EVENTSTORE_CLEANUP_POLICY:-compact}
  stateStoreName: _streamregistry_streams_kv${STREAM_REGISTRY_PRODUCER_STATE_TOPIC_SUFFIX_STATE:-_v0.1}

# properties of the Kafka Topic that has all the Cluster details.
infraManagerConfig:
  className: com.expediagroup.streamplatform.streamregistry.provider.impl.KafkaInfraManager
  config:
    infraManagerTopic: _streamregistry_infra${STREAM_REGISTRY_INFRA_TOPIC_SUFFIX:-_v0.1}
    infraManagerStateStoreName: _streamregistry_infra_kv${STREAM_REGISTRY_INFRA_STATE_TOPIC_SUFFIX:-_v0.1}
    infraKStreamsProperties:
      bootstrap.servers: ${STREAM_REGISTRY_BOOTSTRAP_SERVERS:-localhost:9092}
      application.id: stream-registry-infra
      key.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
      value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
      schema.registry.url: ${STREAM_REGISTRY_SCHEMA_REGISTRY_URL:-http://localhost:8081}
      replication.factor: ${STREAM_REGISTRY_INFRA_REPLICATION_FACTOR:-1}

logging:
  level: INFO
  loggers:
    com.expediagroup: DEBUG
  appenders:
  - type: console
    logFormat: "[%d{HH:mm:ss.SSS}] [%t] %-6level %logger{5} - %msg %n"

swagger:
  resourcePackage: com.expediagroup.streamplatform.streamregistry.resource
  title: Stream Registry API
  version: v0
  description: Stream Registry API
  contact: stream-registry-committers@expediagroup.com
  scan: true

httpClient:
  timeout: 10000ms
  connectionTimeout: 10000ms
  connectionRequestTimeout: 10000ms
